generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String           @id @default(cuid())
  email                  String           @unique
  password               String
  role                   String           @default("MEMBER")
  status                 String           @default("ACTIVE")
  emailVerified          Boolean          @default(false)
  emailVerificationToken String?
  createdAt              DateTime         @default(now())
  lastLogin              DateTime?
  assignments            Assignment[]
  auditLogs              AuditLog[]
  flags                  Flag[]           @relation("FlagReporter")
  sentMessages           Message[]        @relation("MessageSender")
  ownedRequests          MitzvahRequest[] @relation("RequestOwner")
  pointsEntries          PointsLedger[]
  profile                Profile?
  receivedReviews        Review[]         @relation("ReviewReviewee")
  reviews                Review[]         @relation("ReviewReviewer")

  @@map("users")
}

model Profile {
  id           String   @id @default(cuid())
  userId       String   @unique
  displayName  String?
  bio          String?
  city         String?
  languages    String?
  skills       String?
  availability String?
  privacy      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model MitzvahRequest {
  id                String         @id @default(cuid())
  ownerId           String
  title             String
  description       String
  category          String
  status            String         @default("OPEN")
  urgency           String         @default("NORMAL")
  location          String?
  locationDisplay   String?
  timeWindowStart   DateTime?
  timeWindowEnd     DateTime?
  requirements      String?
  attachments       String?
  estimatedDuration Int?
  maxPerformers     Int            @default(1)
  pointValue        Int?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  assignment        Assignment?
  flags             Flag[]
  messages          Message[]
  owner             User           @relation("RequestOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  pointsEntries     PointsLedger[]
  reviews           Review[]

  @@map("mitzvah_requests")
}

model Assignment {
  id          String         @id @default(cuid())
  requestId   String         @unique
  performerId String
  status      String         @default("CLAIMED")
  claimedAt   DateTime       @default(now())
  completedAt DateTime?
  confirmedAt DateTime?
  notes       String?
  proofPhotos String?
  performer   User           @relation(fields: [performerId], references: [id], onDelete: Cascade)
  request     MitzvahRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@map("assignments")
}

model PointRule {
  id         String   @id @default(cuid())
  category   String   @unique
  basePoints Int
  modifiers  String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())

  @@map("point_rules")
}

model PointsLedger {
  id        String          @id @default(cuid())
  userId    String
  requestId String?
  delta     Int
  reason    String
  createdAt DateTime        @default(now())
  request   MitzvahRequest? @relation(fields: [requestId], references: [id])
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("points_ledger")
}

model Message {
  id        String         @id @default(cuid())
  requestId String
  senderId  String
  content   String
  readAt    DateTime?
  createdAt DateTime       @default(now())
  request   MitzvahRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  sender    User           @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Review {
  id         String         @id @default(cuid())
  requestId  String
  reviewerId String
  revieweeId String
  stars      Int
  comment    String?
  visibility String         @default("PUBLIC")
  createdAt  DateTime       @default(now())
  request    MitzvahRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  reviewee   User           @relation("ReviewReviewee", fields: [revieweeId], references: [id], onDelete: Cascade)
  reviewer   User           @relation("ReviewReviewer", fields: [reviewerId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Flag {
  id         String          @id @default(cuid())
  requestId  String?
  reporterId String
  targetType String
  targetId   String
  reason     String
  status     String          @default("PENDING")
  notes      String?
  createdAt  DateTime        @default(now())
  reporter   User            @relation("FlagReporter", fields: [reporterId], references: [id], onDelete: Cascade)
  request    MitzvahRequest? @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@map("flags")
}

model AuditLog {
  id         String   @id @default(cuid())
  actorId    String
  action     String
  targetType String
  targetId   String
  metadata   String?
  createdAt  DateTime @default(now())
  actor      User     @relation(fields: [actorId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}
