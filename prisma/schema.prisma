generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model assignments {
  id               String           @id
  requestId        String           @unique
  performerId      String
  status           String           @default("CLAIMED")
  claimedAt        DateTime         @default(now())
  completedAt      DateTime?
  confirmedAt      DateTime?
  notes            String?
  proofPhotos      String?
  users            users            @relation(fields: [performerId], references: [id], onDelete: Cascade)
  mitzvah_requests mitzvah_requests @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model audit_logs {
  id         String   @id
  actorId    String
  action     String
  targetType String
  targetId   String
  metadata   String?
  createdAt  DateTime @default(now())
  users      users    @relation(fields: [actorId], references: [id], onDelete: Cascade)
}

model flags {
  id               String           @id
  targetType       String
  targetId         String
  reporterId       String
  reasonCode       String
  notes            String?
  status           String           @default("PENDING")
  createdAt        DateTime         @default(now())
  users            users            @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  mitzvah_requests mitzvah_requests @relation(fields: [targetId], references: [id])
}

model messages {
  id               String           @id
  threadId         String
  senderId         String
  requestId        String
  body             String
  createdAt        DateTime         @default(now())
  mitzvah_requests mitzvah_requests @relation(fields: [requestId], references: [id], onDelete: Cascade)
  users            users            @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model mitzvah_requests {
  id              String       @id
  ownerId         String
  title           String
  description     String
  category        String
  locationGeo     String?
  locationDisplay String
  timeWindowStart DateTime?
  timeWindowEnd   DateTime?
  urgency         String       @default("NORMAL")
  visibility      String       @default("PUBLIC")
  requirements    String?
  attachments     String?
  status          String       @default("OPEN")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime
  assignments     assignments?
  flags           flags[]
  messages        messages[]
  users           users        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  reviews         reviews[]
}

model point_rules {
  id            String   @id
  category      String
  basePoints    Int
  modifiers     String
  effectiveFrom DateTime @default(now())
  createdAt     DateTime @default(now())
}

model points_ledger {
  id        String   @id
  userId    String
  requestId String?
  delta     Int
  reason    String
  createdAt DateTime @default(now())
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model profiles {
  id             String   @id
  userId         String   @unique
  displayName    String
  bio            String?
  languages      String?
  city           String?
  zip            String?
  photoUrl       String?
  skills         String?
  availability   String?
  travelRadiusKm Int?
  privacy        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  users          users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model reviews {
  id                              String           @id
  requestId                       String
  reviewerId                      String
  revieweeId                      String
  stars                           Int              @default(5)
  comment                         String?
  visibility                      String           @default("PUBLIC")
  createdAt                       DateTime         @default(now())
  mitzvah_requests                mitzvah_requests @relation(fields: [requestId], references: [id], onDelete: Cascade)
  users_reviews_revieweeIdTousers users            @relation("reviews_revieweeIdTousers", fields: [revieweeId], references: [id], onDelete: Cascade)
  users_reviews_reviewerIdTousers users            @relation("reviews_reviewerIdTousers", fields: [reviewerId], references: [id], onDelete: Cascade)
}

model users {
  id                                String             @id
  email                             String             @unique
  password                          String
  role                              String             @default("MEMBER")
  status                            String             @default("ACTIVE")
  emailVerified                     Boolean            @default(false)
  emailVerificationToken            String?
  createdAt                         DateTime           @default(now())
  lastLogin                         DateTime?
  assignments                       assignments[]
  audit_logs                        audit_logs[]
  flags                             flags[]
  messages                          messages[]
  mitzvah_requests                  mitzvah_requests[]
  points_ledger                     points_ledger[]
  profiles                          profiles?
  reviews_reviews_revieweeIdTousers reviews[]          @relation("reviews_revieweeIdTousers")
  reviews_reviews_reviewerIdTousers reviews[]          @relation("reviews_reviewerIdTousers")
}
